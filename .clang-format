---
# see. https://clang.llvm.org/docs/ClangFormatStyleOptions.html
# 语言: Cpp
Language:        Cpp

# 基础样式
BasedOnStyle:  Google

# 访问说明符(public、private等)的偏移
AccessModifierOffset: -4

# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignAfterOpenBracket: Align

# 连续赋值时，是否对齐所有等号
AlignConsecutiveAssignments: false

# 连续声明时，是否对齐所有声明的变量名
AlignConsecutiveDeclarations: false

# 左对齐逃脱换行(使用反斜杠换行)的反斜杠
AlignEscapedNewlines: Left

# 水平对齐二元和三元表达式的操作数
AlignOperands: true

# 对齐连续的尾随的注释
AlignTrailingComments: true

# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: false

# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: false

# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false

# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: None

# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine: false

# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false

# 总是在定义返回类型后换行
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None

# 多行字符串是否强制多行
AlwaysBreakBeforeMultilineStrings: false

AlwaysBreakTemplateDeclarations: Yes

# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: true

# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: true

# 大括号换行
BraceWrapping:
  AfterClass:      false # class定义后面
  AfterControlStatement: false # 控制语句后面
  AfterEnum:       false # enum定义后面
  AfterFunction:   false # 函数定义后面
  AfterNamespace:  false # 命名空间定义后面
  AfterObjCDeclaration: false # ObjC定义后面
  AfterStruct:     false # struct定义后面
  AfterUnion:      false # union定义后面
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  IndentBraces:    false # 缩进大括号
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: NonAssignment

# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Attach

BreakBeforeInheritanceComma: false
BreakInheritanceList: BeforeColon
BreakBeforeTernaryOperators: true


# 在构造函数的初始化列表的逗号前换行
BreakConstructorInitializersBeforeComma: true

# 构造函数初始化样式，改为在 : 后换行
BreakConstructorInitializers: AfterColon

BreakAfterJavaFieldAnnotations: false

# 格式化时允许中断字符串文字
BreakStringLiterals: true

# 每行字符的限制，0表示没有限制
ColumnLimit:     100

# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas:  '^ IWYU pragma:'
CompactNamespaces: false

# 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerAllOnOneLineOrOnePerLine: true
AllowAllConstructorInitializersOnNextLine: false


# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 8

# 延续的行的缩进宽度
ContinuationIndentWidth: 4

PenaltyBreakBeforeFirstCallParameter: 150
PenaltyBreakAssignment: 150
PenaltyBreakComment: 150
PenaltyBreakFirstLessLess: 150
PenaltyBreakString: 150
PenaltyBreakTemplateDeclaration: 150
PenaltyExcessCharacter: 150
PenaltyReturnTypeOnItsOwnLine: 150

# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true

# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false 
PointerAlignment: Left

# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false

# 自动填充缺失的namespace 注释
FixNamespaceComments: true

# namespace 不对齐
NamespaceIndentation: None

# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

SortIncludes: true
IncludeBlocks: Preserve

# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
#   可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
  - Regex:           '^<ext/.*\.h>'
    Priority:        2
  - Regex:           '^<.*\.h>'
    Priority:        1
  - Regex:           '^<.*'
    Priority:        2
  - Regex:           '.*'
    Priority:        3
IncludeIsMainRegex: '([-_](test|unittest))?$'

IndentCaseLabels: false
IndentPPDirectives: None
IndentWidth:     4
IndentWrappedFunctionNames: false
JavaScriptQuotes: Leave
JavaScriptWrapImports: true
KeepEmptyLinesAtTheStartOfBlocks: false
MacroBlockBegin: ''
MacroBlockEnd:   ''
MaxEmptyLinesToKeep: 1
ObjCBinPackProtocolList: Never
ObjCBlockIndentWidth: 2
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: true

PointerAlignment: Left
RawStringFormats:
  - Language:        Cpp
    Delimiters:
      - cc
      - CC
      - cpp
      - Cpp
      - CPP
      - 'c++'
      - 'C++'
    CanonicalDelimiter: ''
    BasedOnStyle:    google
  - Language:        TextProto
    Delimiters:
      - pb
      - PB
      - proto
      - PROTO
    EnclosingFunctions:
      - EqualsProto
      - EquivToProto
      - PARSE_PARTIAL_TEXT_PROTO
      - PARSE_TEST_PROTO
      - PARSE_TEXT_PROTO
      - ParseTextOrDie
      - ParseTextProtoOrDie
    CanonicalDelimiter: ''
    BasedOnStyle:    google
ReflowComments:  true

# 对using namespace 进行排序
SortUsingDeclarations: true


# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false

# 在模板关键字后面添加空格
SpaceAfterTemplateKeyword: true

# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true

SpaceBeforeCpp11BracedList: false

# 在类成员变量初始化时追加空格
SpaceBeforeCtorInitializerColon: true

# 在继承关键字前添加空格
SpaceBeforeInheritanceColon: true

# 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements

# for 循环前加空格
SpaceBeforeRangeBasedForLoopColon: true

# 在空的圆括号中添加空格
SpaceInEmptyParentheses: false

# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 1

# 在尖括号的<后和>前添加空格
SpacesInAngles:  false

# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: false

# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses: false

# 在圆括号的(后和)前添加空格
SpacesInParentheses: false

# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false

# TODO: uncomment when use clang-format 9
# AllowAllConstructorInitializersOnNextLine: false

Standard:        Cpp11
TabWidth:        4
UseTab:          Never
...
